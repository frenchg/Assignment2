function [impanorama] = transform2(InputImage1,InputImage2, transform_matrix)
%Transfrom- This function takes an image, a transform matrix, and a
%transform type and performs the transform an outputs the result. 
%  The transfrom matrix are all input by me for the various questions. The
%  transfrom tpye just specifies the inverse that should be used. 

% TransformMatrix A: 3x3

InputImage1 = imread(InputImage1);
InputImage2 = imread(InputImage2);

%A = transform_matrix;

% InputImage1 = image_1;
% InputImage = image_2;
D = transform_matrix;

Image = rgb2gray(InputImage2);
Image1 = rgb2gray(InputImage1);

% Find which inverse to use

%type = transform_type;
A_inv = (D);
A = inv(D);

I = im2double(Image);
I1 = im2double(Image1);

[H,W] = size(Image);
[H1,W1] = size(Image);


c1 = [1,1,1]';  %corners

c2 = [W,1,1]';

c3 = [1,H,1]';

c4 = [W,H,1]';

cp1 = A*c1;   %transformed corners

cp2 = A*c2;

cp3 = A*c3;

cp4 = A*c4;


xp1 = cp1(1)/cp1(3); yp1 = cp1(2)/cp1(3); %finding edges of the image

xp2 = cp2(1)/cp2(3); yp2 = cp2(2)/cp2(3);

xp3 = cp3(1)/cp3(3); yp3 = cp3(2)/cp3(3);

xp4 = cp4(1)/cp4(3); yp4 = cp4(2)/cp4(3);


Ap = [min( [1,xp1,xp2,xp3,xp4] ), min( [1,yp1,yp2,yp3,yp4] )];

Bp = [min( [1,xp1,xp2,xp3,xp4] ), max( [yp1,yp2,yp3,yp4] )];

Cp = [max( [xp1,xp2,xp3,xp4] ), min( [1,yp1,yp2,yp3,yp4] )];

Dp = [max( [xp1,xp2,xp3,xp4] ), max( [yp1,yp2,yp3,yp4] )];


minx = 1; miny = 1;

maxx = Cp(1); maxy = Dp(2);

[Xprime,Yprime] = meshgrid( minx:maxx, miny:maxy );


Xsize = size(Xprime);
Ysize = size(Yprime);

heightIprime = Xsize(1);
widthIprime = Ysize(2);

pprimematrix = [Xprime(:)';Yprime(:)';ones(1,heightIprime*widthIprime)];


phatmatrix = A_inv*pprimematrix;

xlongvector = phatmatrix(1,:) ./ phatmatrix(3,:);

ylongvector = phatmatrix(2,:) ./ phatmatrix(3,:);


xmatrix = reshape( xlongvector', heightIprime, widthIprime );

ymatrix = reshape( ylongvector', heightIprime, widthIprime );

Iprime = interp2(I,xmatrix,ymatrix);

imageoutput =  Iprime ; 

Transformed_Image = imageoutput;

nanlocations = isnan( Transformed_Image );
Transformed_Image( nanlocations )=0;

[N_H,N_W] = size(Transformed_Image);

im1_expanded = zeros(N_H,N_W);
im1_expanded(1:H,1:W) = I1 ; %expanding image one with zeros 



imshow(im1_expanded);
[x_overlap,y_overlap]=ginput(2);

overlapleft=round(x_overlap(1));
overlapright=round(x_overlap(2));

distance = overlapright-overlapleft;
stepvalue = 1/distance;  % creating my stepvalue
zeros_till_overlapleft = zeros(1,overlapleft);
ones_till_overlapright = ones(1,N_W-overlapright-1); 

% the code that you had written for ramp didn't work quite right
% I ended up doing some math to find how much they should overlap

ramp=[zeros_till_overlapleft, 0 : stepvalue : 1, ones_till_overlapright];

im2_blend = Transformed_Image .* repmat( ramp,N_H,1 );

ones_till_overlapleft = zeros(1,N_W-overlapright-1);
zeros_till_overlapright = ones(1,overlapleft);


ramp1=[ones_till_overlapleft, 0 : stepvalue : 1, zeros_till_overlapright];

im1_blend = im1_expanded .* repmat( flip(ramp1),N_H,1 );
plot(flip(ramp1));


impanorama=im1_blend+im2_blend;


imshow(impanorama);

end